<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.back.travelit.mapper.product.ProductMapper">

    <!-- 상품 목록 조회 -->
    <!-- 상품 목록 조회 -->
    <select id="findAll" parameterType="com.back.travelit.dto.request.product.ProductSearch" resultType="com.back.travelit.dto.response.product.ProductResponse">
        SELECT P.PRO_ID, P.USER_ID, P.PRO_NAME, P.PRO_CATEGORY_TOTAL, P.PRO_CATEGORY_DETAIL, P.PRO_CONTENT, P.PRO_RES, P.PRO_PRICE, P.PRO_PER_MAX,
        P.PRO_DATE, P.PRO_LOCATION, P.PRO_VIEW, P.TOUR_DATE, P.TOUR_TIME, P.TOUR_START, P.TOUR_END, PI.PRO_IMG_NAME
        FROM PRODUCT P
        INNER JOIN (
        SELECT PI.PRO_ID, MIN(PI.PRO_IMG_ID) AS MIN_PRO_IMG_ID
        FROM PRODUCT_IMG PI
        GROUP BY PI.PRO_ID
        ) MIN_IMG ON P.PRO_ID = MIN_IMG.PRO_ID
        INNER JOIN PRODUCT_IMG PI ON MIN_IMG.MIN_PRO_IMG_ID = PI.PRO_IMG_ID
        <where>
            <include refid="search"/>
        </where>
        ORDER BY P.PRO_ID DESC
        LIMIT #{productPagination.limitStart}, #{recordSize}
    </select>

    <!-- 상품 상세 조회 -->
    <select id="findById" parameterType="int" resultType="com.back.travelit.dto.response.product.ProductViewResponse">
        SELECT PRO_ID, USER_ID, PRO_NAME, PRO_CATEGORY_TOTAL, PRO_CATEGORY_DETAIL, PRO_CONTENT, PRO_RES, PRO_PRICE, PRO_PER_MAX,
               PRO_DATE, PRO_LOCATION, PRO_VIEW,TOUR_DATE,TOUR_TIME,TOUR_START, TOUR_END
        FROM PRODUCT
        WHERE PRO_ID = #{value};
    </select>

    <!-- 상품 등록 -->
    <insert id="save" parameterType="com.back.travelit.dto.request.product.ProductRequest" useGeneratedKeys="true" keyProperty="PRO_ID">
        INSERT INTO PRODUCT (PRO_ID, USER_ID, PRO_NAME, PRO_CATEGORY_TOTAL, PRO_CATEGORY_DETAIL, PRO_CONTENT,
                             PRO_RES, PRO_PRICE, PRO_PER_MAX, PRO_DATE, PRO_LOCATION, PRO_VIEW, TOUR_DATE, TOUR_TIME,
                             TOUR_START, TOUR_END)
        VALUES (#{PRO_ID}, 1, #{PRO_NAME}, #{PRO_CATEGORY_TOTAL}, #{PRO_CATEGORY_DETAIL}, #{PRO_CONTENT},
                #{PRO_RES}, #{PRO_PRICE}, #{PRO_PER_MAX}, DEFAULT, #{PRO_LOCATION}, DEFAULT, #{TOUR_DATE}, #{TOUR_TIME},
                #{TOUR_START}, #{TOUR_END})
    </insert>

    <!-- 상품 수정 등록 -->
    <update id="update" parameterType="com.back.travelit.dto.request.product.ProductRequest">
        UPDATE PRODUCT
        SET USER_ID = 1, PRO_NAME = #{PRO_NAME}, PRO_CATEGORY_TOTAL = #{PRO_CATEGORY_TOTAL}, PRO_CATEGORY_DETAIL = #{PRO_CATEGORY_DETAIL},
            PRO_CONTENT = #{PRO_CONTENT}, PRO_RES = #{PRO_RES}, PRO_PRICE = #{PRO_PRICE}, PRO_PER_MAX = #{PRO_PER_MAX},
            PRO_DATE = DEFAULT, PRO_LOCATION = #{PRO_LOCATION}, PRO_VIEW = DEFAULT, TOUR_DATE = #{TOUR_DATE},
            TOUR_TIME = #{TOUR_TIME}, TOUR_START = #{TOUR_START}, TOUR_END = #{TOUR_END}
        WHERE PRO_ID = #{PRO_ID}
    </update>

    <!-- 상품 삭제 -->
    <delete id="deleteById" parameterType="int">
        DELETE
        FROM PRODUCT
        WHERE PRO_ID = #{PRO_ID}
    </delete>

    <!-- 전체 상품 수 조회 -->
    <select id="count" parameterType="com.back.travelit.dto.request.product.ProductSearch" resultType="int">
        SELECT COUNT(*)
        FROM PRODUCT
        <where>
            <include refid="search"/>
        </where>
    </select>

    <!-- 게시글 검색 -->
    <sql id="search">
        <!-- 키워드 -->
        <if test="keyword != null and keyword != ''">
            <!-- choose when otherwis: switch문 -->
            <choose>
                <!-- 검색 유형 -->
                <when test="searchType != null and searchType != ''">
                    <choose>
                        <when test="'PRO_NAME'.equals(searchType)">
                            AND PRO_NAME LIKE CONCAT('%', #{keyword}, '%')
                        </when>
                        <when test="'PRO_CONTENT'.equals(searchType)">
                            AND PRO_CONTENT LIKE CONCAT('%', #{keyword}, '%')
                        </when>
                        <when test="'PRO_LOCATION'.equals(searchType)">
                            AND PRO_LOCATION LIKE CONCAT('%', #{keyword}, '%')
                        </when>
                        <when test="'PRO_CATEGORY_TOTAL'.equals(searchType)">
                            AND PRO_CATEGORY_TOTAL LIKE CONCAT('%', #{keyword}, '%')
                        </when>
                    </choose>
                </when>

                <!-- 전체 검색 -->
                <otherwise>
                    AND (
                    PRO_NAME LIKE CONCAT('%', #{keyword}, '%')
                    OR PRO_CONTENT LIKE CONCAT('%', #{keyword}, '%')
                    OR PRO_LOCATION LIKE CONCAT('%', #{keyword}, '%')
                    OR PRO_CATEGORY_TOTAL LIKE CONCAT('%', #{keyword}, '%')
                    OR PRO_CATEGORY_DETAIL LIKE CONCAT('%', #{keyword}, '%')
                    )
                </otherwise>
            </choose>
        </if>
    </sql>

    <!-- 대표 이미지 조회 -->
    <select id="productImageUrl" parameterType="int" resultType="String">
        SELECT PI.PRO_IMG_NAME
        FROM PRODUCT P
        INNER JOIN PRODUCT_IMG PI
        ON P.PRO_ID = PI.PRO_ID
        WHERE P.PRO_ID = #{PRO_ID};
    </select>

    <!-- 상세 이미지 조회 -->
    <select id="productDeImageUrl" parameterType="int" resultType="String">
        SELECT PDI.PRO_DEIMG_NAME
        FROM PRODUCT P
                 INNER JOIN PRODUCT_DEIMG PDI
                            ON P.PRO_ID = PDI.PRO_ID
        WHERE P.PRO_ID = #{PRO_ID};
    </select>

    <!-- 조회수 -->
    <update id="increaseViews" parameterType="int">
        UPDATE PRODUCT
        SET PRO_VIEW = PRO_VIEW + 1
        WHERE PRO_ID = #{PRO_ID}
    </update>

    <!-- 조회순 5개 상품 조회 -->
    <select id="findByViews" resultType="com.back.travelit.dto.response.product.ProductResponse">
        SELECT P.PRO_ID, P.USER_ID, P.PRO_NAME, P.PRO_CATEGORY_TOTAL, P.PRO_CATEGORY_DETAIL, P.PRO_CONTENT, P.PRO_RES, P.PRO_PRICE, P.PRO_PER_MAX,
               P.PRO_DATE, P.PRO_LOCATION, P.PRO_VIEW, P.TOUR_DATE, P.TOUR_TIME, P.TOUR_START, P.TOUR_END, PI.PRO_IMG_NAME
        FROM PRODUCT P
                 INNER JOIN (
            SELECT PI.PRO_ID, MIN(PI.PRO_IMG_ID) AS MIN_PRO_IMG_ID
            FROM PRODUCT_IMG PI
            GROUP BY PI.PRO_ID
        ) MIN_IMG ON P.PRO_ID = MIN_IMG.PRO_ID
                 INNER JOIN PRODUCT_IMG PI ON MIN_IMG.MIN_PRO_IMG_ID = PI.PRO_IMG_ID
        ORDER BY P.PRO_VIEW DESC
        LIMIT 4
    </select>


</mapper>